import * as t from 'io-ts'

import { AdditionalInfo } from './schemas/Additional_1_000'
import { AllowanceInfo } from './schemas/Allowance_1_000'
import { AllowanceTypesInfo } from './schemas/AllowanceTypes_1_000'
import { ClassInfo } from './schemas/Classes_2_000'
import { LeaveOfAbsenceInfo } from './schemas/LeaveOfAbsenceControl_1_000'
import { LeaveOfAbsenceTypeInfo } from './schemas/LeaveOfAbsenceTypes_1_000'
import { PayRollCostCenterInfo } from './schemas/PayRollCostCenter_1_000'
import { PositionInfo } from './schemas/Positions_1_000'
import { StabilityControlInfo } from './schemas/StabilityControl_1_000'
import { StabilityTypeInfo } from './schemas/StabilityType_1_000'
import { TrainingNecessityInfo } from './schemas/TrainingNecessity_1_000'
import { WorkingShiftInfo } from './schemas/WorkingShift_1_000'
import { datetime } from './custom-types'

/**
 * An object as returned by TOTVS' TTalk API.
 */
export const Object = t.union([
    PayRollCostCenterInfo,
    LeaveOfAbsenceTypeInfo,
    AllowanceTypesInfo,
    PositionInfo,
    StabilityTypeInfo,
    ClassInfo,
    WorkingShiftInfo,
    LeaveOfAbsenceInfo,
    AdditionalInfo,
    TrainingNecessityInfo,
    StabilityControlInfo,
    AllowanceInfo
])
export type Object = t.TypeOf<typeof Object>

/**
 * A paginated array of objects as returned by TOTVS' TTalk API.
 */
export const PaginatedObject = t.type({
    hasNext: t.boolean,
    items: t.array(Object)
})
export type PaginatedObject = t.TypeOf<typeof PaginatedObject>

/**
 * A converter interface, meant to convert between TOTVS' models and ours.
 */
export interface Converter<From, To> {
    /**
     * Convert a TOTVS' TTalk message to an internal model of our own.
     *
     * @param from Original message
     */
    fromTTalk(from: From): To

    /**
     * Converts a message in our internal odel to TOTVS' TTalk's.
     *
     * @param from Original message
     */
    toTTalk(from: To): From
}

// Re-export types autogenerated from TOTVS' schemas!
export {
    PayRollCostCenterInfo,
    LeaveOfAbsenceTypeInfo,
    AllowanceTypesInfo,
    PositionInfo,
    StabilityTypeInfo,
    ClassInfo,
    WorkingShiftInfo,
    AdditionalInfo,
    AllowanceInfo,
    LeaveOfAbsenceInfo,
    StabilityControlInfo,
    TrainingNecessityInfo
}

/**
 * The Person entity, as provided through our API to TOTVS.
 */
export const Person = t.intersection([
    t.type({
        id: t.string,
        name: t.string,
        cpf: t.string,
        birth: datetime,
        gender: t.number
    }),
    t.partial({
        rg: t.string,
        email: t.string,
        street: t.string,
        number: t.union([t.string, t.number]),
        district: t.string,
        city: t.string,
        zipCode: t.string,
        phone: t.string
    })
])
export type Person = t.TypeOf<typeof Person>

/**
 * The Employee entity, as provided through our API to TOTVS.
 */
export const Employee = t.intersection([
    Person,
    t.type({
        registration: t.string,
        workshift: t.string,
        costCenter: t.string,
        occupation: t.string
    }),
    t.partial({
        workshiftDescription: t.string,
        costCenterDescription: t.string,
        occupationDescription: t.string,
        department: t.string,
        departmentDescription: t.string,
        admissionDate: datetime,
        dismissalDate: datetime,
        pisCode: t.string,
        eSocialRoleId: t.string,
        eSocialId: t.string,
        sefipCategory: t.string,
        situation: t.number
    })
])
export type Employee = t.TypeOf<typeof Employee>

/**
 * The Dependant entity, as provided through our API to TOTVS.
 */
export const Dependant = t.intersection([
    t.type({
        id: t.string,
        employee: t.string,
        name: t.string,
        birth: datetime,
        gender: t.number,
        cpf: t.string
    }),
    t.partial({
        rg: t.string
    })
])

export type Dependant = t.TypeOf<typeof Dependant>

/**
 * The FunctionalHistory entity, as provided through our API to TOTVS.
 */
export const FunctionalHistory = t.intersection([
    t.type({
        id: t.string,
        employee: t.string,
        occurrenceDate: datetime,
        costCenter: t.string,
        occupation: t.string
    }),
    t.partial({
        costCenterDescription: t.string,
        department: t.string,
        departmentDescription: t.string,
        occupationDescription: t.string,
        employeePosition: t.string,
        sefipCategory: t.string
    })
])
export type FunctionalHistory = t.TypeOf<typeof FunctionalHistory>

/**
 * The TrainingHistory entity, as provided through our API to TOTVS.
 */
export const TrainingHistory = t.intersection([
    t.type({
        id: t.string,
        employee: t.string,
        expectedDate: datetime,
        training: t.string
    }),
    t.partial({
        trainingDescription: t.string,
        approval: t.number,
        completionDate: datetime,
        expirationDate: datetime
    })
])

export type TrainingHistory = t.TypeOf<typeof TrainingHistory>
